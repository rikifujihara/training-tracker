// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/types/generated"
  createInputTypes       = false
  addInputTypeValidation = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InvitationStatus {
  pending
  accepted
  declined
}

model Invitation {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  inviter   String           @db.ObjectId
  invitee   String           @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    InvitationStatus @default(pending)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  // Custom fields
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  firstName String?
  lastName  String?
  phone     String?

  // Trainer-specific fields
  businessName String?
  bio          String?

  // Client-specific fields
  trainerId String? @db.ObjectId
  trainer   User?   @relation("TrainerClients", fields: [trainerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clients   User[]  @relation("TrainerClients")

  // Status
  isActive Boolean @default(true)

  // NextAuth required fields
  accounts Account[]
  sessions Session[]

  // Training program relations
  clientPrograms  TrainingProgram[] @relation("ClientPrograms")
  trainerPrograms TrainingProgram[] @relation("TrainerPrograms")

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enums
enum UserRole {
  TRAINER
  CLIENT
}

// Training Program START //
model TrainingProgram {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String? @db.ObjectId
  trainerId     String  @db.ObjectId
  isTemplate    Boolean @default(false)
  weeksDuration Int
  name          String
  days          Day[]

  client  User? @relation("ClientPrograms", fields: [clientId], references: [id], onDelete: Cascade)
  trainer User  @relation("TrainerPrograms", fields: [trainerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trainingprograms")
}

type Day {
  name      String
  dayIndex  Int
  lifts     Lift[]
  cardio    Cardio[]
  stretches Stretch[]
}

type Lift {
  muscleGroup String
  name        String
  liftIndex   Int
  sets        LiftSet[]
}

type LiftSet {
  setIndex     Int
  minReps      Int
  maxReps      Int
  minWeight    Int
  maxWeight    Int
  minRest      Int?
  maxRest      Int?
  minRir       Int?
  maxRir       Int?
  performances LiftPerformance[]
}

type LiftPerformance {
  weekIndex Int
  date      DateTime
  weight    Float
  reps      Int
  rir       Int
  notes     String?
}

type Cardio {
  name        String
  cardioIndex Int
  sets        CardioSet[]
}

type CardioSet {
  setIndex     Int
  minSpeed     Float?
  maxSpeed     Float?
  minIncline   Float?
  maxIncline   Float?
  minTime      Int? // minutes
  maxTime      Int?
  performances CardioPerformance[]
}

type CardioPerformance {
  weekIndex Int
  date      DateTime // ‚Üê DateTime here too
  speed     Float?
  incline   Float?
  time      Int? // actual minutes
  notes     String?
}

type Stretch {
  name         String
  stretchIndex Int
  sets         StretchSet[]
}

// I'm not flattening the stretch set into the Stretch for now incase we want to introduce sets.
type StretchSet {
  setIndex     Int
  weight       String?
  totalSeconds String?
  holdSeconds  String?
  restSeconds  Int?
  performances StretchPerformance[]
}

type StretchPerformance {
  weekIndex Int
  date      DateTime
  completed Boolean
  notes     String?
}

// Training Program End
