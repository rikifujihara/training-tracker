// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Add this User model to your existing schema.prisma

model User {
  id        String   @id // This will be the UUID from auth.users.id
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  displayName String?  @map("display_name")
  avatarUrl   String?  @map("avatar_url")
  role        UserRole @default(TRAINER)
  isActive    Boolean  @default(true) @map("is_active")

  // Optional: Additional profile fields
  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  // Relationships
  leads            Lead[]
  contactPoints    ContactPoint[]
  messageTemplates MessageTemplate[]
  tasks            Task[]
  Consultation     Consultation[]

  // Future relationships (will uncomment later)
  // workouts     Workout[]
  // programs     Program[]
  // clientBookings Booking[] @relation("ClientBookings")
  // trainerBookings Booking[] @relation("TrainerBookings") 

  @@map("users")
}

model Lead {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Lead fields
  firstName    String? @map("first_name")
  lastName     String? @map("last_name")
  age          String?
  birthday     String?
  gender       String?
  phoneNumber  String? @map("phone_number")
  email        String?
  goals        String?
  generalNotes String? @map("general_notes")

  // Import metadata
  importedAt DateTime @default(now()) @map("imported_at")
  source     String   @default("email_upload") // Track where lead came from

  // Relationships
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactPoints ContactPoint[]
  tasks         Task[]
  consultations Consultation[]

  // Indexes
  @@index([userId])
  @@index([email])
  @@map("leads")
}

model ContactPoint {
  id        String   @id @default(cuid())
  leadId    String   @map("lead_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Contact fields
  contactType ContactType          @map("contact_type")
  outcome     ContactPointOutcome? @map("outcome")
  notes       String?
  contactDate DateTime             @map("contact_date")

  // Relationships
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([leadId])
  @@index([userId])
  @@index([contactDate])
  @@map("contact_points")
}

enum UserRole {
  TRAINER
  CLIENT

  @@map("user_role")
}

enum ContactType {
  PHONE
  TEXT

  @@map("contact_type")
}

enum ContactPointOutcome {
  NO_ANSWER
  NOT_INTERESTED
  REQUESTED_CALLBACK
  INTERESTED
  SCHEDULED_APPOINTMENT
  LEFT_VOICEMAIL
  BUSY

  @@map("contact_point_outcome")
}

model MessageTemplate {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") // Always belongs to a user
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Template fields
  name      String // "Initial Contact", "Follow Up", etc.
  content   String // "Hi #{firstName}, this is Riki from..."
  sortOrder Int    @default(0) @map("sort_order") // for custom ordering

  // Relationships
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  consultations Consultation[]

  // Indexes
  @@index([userId])
  @@map("message_template")
}

model Task {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  leadId    String   @map("lead_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")

  // Task fields
  title       String?
  description String?
  dueDate     DateTime @map("due_date")

  // Task type and status
  taskType TaskType   @map("task_type")
  status   TaskStatus @default(PENDING)

  // For message template tasks
  messageTemplateId String? @map("message_template_id")

  // For completed tasks - what was the outcome?
  completedAt DateTime? @map("completed_at")
  notes       String? // Notes from completing the task

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead            Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  messageTemplate MessageTemplate? @relation(fields: [messageTemplateId], references: [id])

  // Indexes
  @@index([dueDate])
  @@index([leadId])
  @@index([userId])
  @@index([status])
  @@index([taskType])
  @@map("tasks")
}

enum TaskType {
  CALL
  SEND_TEXT
  OTHER

  @@map("task_type")
}

enum TaskStatus {
  PENDING
  COMPLETED

  @@map("task_status")
}

model Consultation {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  leadId    String   @map("lead_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")

  // Consultation fields
  scheduledTime DateTime @map("scheduled_time")
  notes         String?

  status  ConsultationStatus   @default(SCHEDULED)
  outcome ConsultationOutcome?

  messageTemplateId String? @map("message_template_id")

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead            Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  messageTemplate MessageTemplate? @relation(fields: [messageTemplateId], references: [id])
  reminderTime    DateTime?        @map("reminder_time")

  // Indexes
  @@index([scheduledTime])
  @@index([leadId])
  @@index([userId])
  @@map("consultations")
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
}

enum ConsultationOutcome {
  NOT_CONVERTED
  CONVERTED
}
