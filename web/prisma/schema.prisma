// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/types/generated"
  createInputTypes       = false
  addInputTypeValidation = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  // Custom fields
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  firstName String?
  lastName  String?
  phone     String?

  // Trainer-specific fields
  businessName   String?
  bio            String?
  certifications String[]

  // Client-specific fields
  trainerId String? @db.ObjectId
  trainer   User?   @relation("TrainerClients", fields: [trainerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clients   User[]  @relation("TrainerClients")

  // Status
  isActive Boolean @default(true)

  // NextAuth required fields
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enums
enum UserRole {
  TRAINER
  CLIENT
}
